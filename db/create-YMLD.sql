--
-- Your Momma Loves Drama Database
-- Apache Derby - Off to the Races
-- Copyright (c) 2005 George Baklarz, Paul Zikopoulos, Dan Scott
--

-- Note: Start the network server:
-- startNetworkServer

-- Connecting to Apache Derby Network Server:
-- connect 'jdbc:derby://localhost:1527/home/havard/Derby/databases/YMLD;create=true;user=APP;password=APP'

-- Connecting to Apache Derby Embedded:
-- connect 'jdbc:derby:/home/havard/Derby/databases/YMLD;create=true;user=APP;password=APP'

-- CREATE SCHEMA APP;
SET SCHEMA APP;
--
-- Drop all tables
--
/*DROP TABLE Transactions;
DROP TABLE Seats;
DROP TABLE Seatmap;
DROP TABLE PricePlan;
DROP TABLE Performances;
DROP TABLE Productions;*/

--
-- Production table contains all of the shows that will be held at the theater
--
CREATE TABLE Productions
(
  --id               INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY,
  id               INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  Production_Title VARCHAR(256),
  Production_Start DATE,
  Production_End   DATE,
  PRIMARY KEY (id)
);

--
-- Each production has a number of performances associated with it.
--
CREATE TABLE Performances
(
  --id                INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY,
  id                INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY,
  Production_No     INTEGER NOT NULL,
  Performance_Time  TIME    NOT NULL,
  Performance_Date  DATE    NOT NULL,
  Performance_Seats INTEGER NOT NULL,
  PRIMARY KEY (id),
  FOREIGN KEY (Production_No) REFERENCES Productions (id)
    ON DELETE CASCADE
);

--
-- Each seat has a certain price associated with it.
--
CREATE TABLE PricePlan
(
  id             INTEGER       NOT NULL GENERATED BY DEFAULT AS IDENTITY(START WITH 10, INCREMENT BY 1),
  PricePlan_Cost DECIMAL(5, 2) NOT NULL,
  PRIMARY KEY (id)
);

--
-- The seat map gives a view of the theater from the seat
--
CREATE TABLE SeatMap
(
  id        INTEGER NOT NULL,
  Seat_View BLOB(50K),
  PRIMARY KEY (id)
);

--
-- The seat table tells us whether a seat has been purchased for a particular performance.
-- In this application, each seat needs to be preallocated by performance.
--
CREATE TABLE Seats
(
  Performance_No INTEGER NOT NULL,
  id             INTEGER NOT NULL,
  PricePlan_No   INTEGER NOT NULL,
  Seat_Available INTEGER NOT NULL,
  CONSTRAINT Performances FOREIGN KEY (Performance_No) REFERENCES Performances (id)
    ON DELETE CASCADE,
  CONSTRAINT PricePlan FOREIGN KEY (PricePlan_No) REFERENCES PricePlan (id)
    ON DELETE RESTRICT,
  CONSTRAINT SeatMap FOREIGN KEY (id) REFERENCES SeatMap (id)
    ON DELETE RESTRICT,
  CONSTRAINT SeatUnique PRIMARY KEY (Performance_No, id)
);

--
-- The transaction log tracks everything that has been done in the database.
--
CREATE TABLE Transactions
(
  --id             INTEGER     NOT NULL GENERATED ALWAYS AS IDENTITY,
  id             INTEGER     NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  Tx_Type        VARCHAR(32) NOT NULL,
  Tx_Date        DATE        NOT NULL,
  Performance_No INTEGER     NOT NULL,
  Seat_No        INTEGER     NOT NULL,
  FOREIGN KEY (Performance_No) REFERENCES Performances (id),
  FOREIGN KEY (Seat_No) REFERENCES SeatMap (id),
  PRIMARY KEY (id)
);

--
-- The INS_PERFORMANCES trigger will update the number of seats that are available
-- for a performance. Note that this trigger assumes that there are 20 performances allocated to
-- a perfomance and that when a seat is reserved (SEAT_AVAILABLE=0) that it should reduce the amount
-- of seats by one. In a real application, you would add to the seat count as records are added to the
-- performance. Data has been pregenerated for this database, so this technique was used to update the records.
--

CREATE TRIGGER INS_PERFORMANCES
AFTER INSERT
  ON SEATS
REFERENCING
  NEW AS NEWROW
FOR EACH ROW
MODE DB2SQL
  UPDATE PERFORMANCES
  SET Performance_Seats =
  Performance_Seats +
  CASE
  WHEN NEWROW.SEAT_AVAILABLE = 0
    THEN -1
  ELSE 0
  END
  WHERE id = NEWROW.Performance_no;
--
-- Import the Production data. Import data is used rather than Import table because of the sequence
-- number being generated by the table description.
--

CALL SYSCS_UTIL.SYSCS_IMPORT_DATA(NULL,
                                  'PRODUCTIONS',
                                  'PRODUCTION_TITLE,PRODUCTION_START,PRODUCTION_END',
                                  NULL,
                                  '/home/havard/Documents/Repo/Local/YMLD-Backend/db/export/productions.dat',
                                  NULL, NULL, NULL, 0);

--
-- There are four price plans for the productions
--
INSERT INTO PricePlan (id, PricePlan_Cost)
VALUES
  (1, 15.00),
  (2, 20.00),
  (3, 25.00),
  (4, 40.00);

--
-- Seat Maps contain information on each seat
--
INSERT INTO SeatMap (id) VALUES 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20;

--
-- Import the Performance data
--
CALL SYSCS_UTIL.SYSCS_IMPORT_DATA(NULL,
                                  'PERFORMANCES',
                                  'PRODUCTION_NO,PERFORMANCE_TIME,PERFORMANCE_DATE,PERFORMANCE_SEATS',
                                  NULL,
                                  '/home/havard/Documents/Repo/Local/YMLD-Backend/db/export/performances.dat', NULL,
                                  NULL, NULL, 0);
--
-- Import the Seat data
--
CALL SYSCS_UTIL.SYSCS_IMPORT_TABLE(NULL, 'SEATS', '/home/havard/Documents/Repo/Local/YMLD-Backend/db/export/seats.dat',
                                   NULL, NULL, NULL, 0);
--CALL SYSCS_UTIL.SYSCS_IMPORT_TABLE (null,'SEATMAP','/home/havard/Documents/Repo/Local/YMLD-Backend/db/export/seatmap.dat',null,null,null,0);

-- Create a trigger to track updates to the number of performances
-- available.
--
CREATE TRIGGER UPT_PERFORMANCES
AFTER UPDATE OF SEAT_AVAILABLE
  ON SEATS
REFERENCING
  NEW AS NEWROW
FOR EACH ROW
MODE DB2SQL
  UPDATE PERFORMANCES
  SET Performance_Seats =
  Performance_Seats +
  CASE
  WHEN NEWROW.SEAT_AVAILABLE = 1
    THEN 1
  ELSE -1
  END
  WHERE id = NEWROW.Performance_no;

QUIT;